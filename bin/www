#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app.js');
const http = require('http');
const cluster = require('cluster');
// const {Worker} = require('worker_threads');
const workers = [];
const numCores = require('os').cpus().length;
// const totalCPUs = require('os').cpus().length;


const setUpWorkerProcess = () => {
  console.log('Master cluster setting up '+ numCores + ' workers');

  for (let i = 0; i< numCores; i++) {
    workers.push(cluster.fork());

    workers[i].on('message', function(message) {
      console.log(message);
    });
  }

  cluster.on('online', function(worker) {
    console.log('Worker '+ worker.process.pid + ' is Listening ');
  });

  cluster.on('exit', function(worker, code, signal) {
    console.log('Worker ' +
        worker.process.pid + 'died with code: ' +
        code + ', and signal :'+ signal);

    workers[workers.length -1].on('message', (message) => {
      console.log(message);
    });
  });
};

const setupExpress = () => {
  const server = http.createServer(app);

  const port = normalizePort(process.env.PORT || '4000');
  // app.set('port', port);

  //  require("../services/CronService");
  // const server = http.createServer(app);

  server.listen(port, () => {
    console.log(`Server started on port ${port}`);
  });
  // server.listen(port);
  server.setTimeout(500000);
  server.on('error', (error) => {
    onError(error, port);
  });

  server.on('listening', () => {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
         'pipe '+ addr :
         'port '+ addr.port;
    console.log('Listening on '+ bind);
  });

  console.log(`Worker ${process.pid} started`);
};

/**
  * setupServer
  * @param isClusterRequired
  */

const setupServer = (isClusterRequired) =>{
  if (isClusterRequired && cluster.isMaster) {
    setUpWorkerProcess();
  } else {
    setupExpress();
  }
};

/**
  * Normalize a port into a number, string, or false.
  */

// eslint-disable-next-line require-jsdoc
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// eslint-disable-next-line require-jsdoc
function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
         'Pipe ' + port :
         'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
if (process.env.NODE_ENV != 'development' &&
     process.env.NODE_ENV != 'staging') {
  if (numCores > 1) {
    setupServer(false);
  } else {
    setupServer(false);
  }
} else {
  setupServer(false);
}

